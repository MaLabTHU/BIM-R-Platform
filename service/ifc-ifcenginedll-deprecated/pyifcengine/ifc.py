# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ifc', [dirname(__file__)])
        except ImportError:
            import _ifc
            return _ifc
        if fp is not None:
            try:
                _mod = imp.load_module('_ifc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ifc = swig_import_helper()
    del swig_import_helper
else:
    import _ifc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def openModelBN(fileName, schemaName):
    return _ifc.openModelBN(fileName, schemaName)
openModelBN = _ifc.openModelBN

def closeModel(model):
    return _ifc.closeModel(model)
closeModel = _ifc.closeModel

def getSPFFHeaderItemAsString(model, itemIndex, itemSubIndex):
    return _ifc.getSPFFHeaderItemAsString(model, itemIndex, itemSubIndex)
getSPFFHeaderItemAsString = _ifc.getSPFFHeaderItemAsString

def getSPFFHeaderItemAsUnicode(model, itemIndex, itemSubIndex):
    return _ifc.getSPFFHeaderItemAsUnicode(model, itemIndex, itemSubIndex)
getSPFFHeaderItemAsUnicode = _ifc.getSPFFHeaderItemAsUnicode

def getEntityExtentBN(model, entityName):
    return _ifc.getEntityExtentBN(model, entityName)
getEntityExtentBN = _ifc.getEntityExtentBN

def getMemberCount(aggregate):
    return _ifc.getMemberCount(aggregate)
getMemberCount = _ifc.getMemberCount

def getAggrElementAsInteger(aggregate, elementIndex):
    return _ifc.getAggrElementAsInteger(aggregate, elementIndex)
getAggrElementAsInteger = _ifc.getAggrElementAsInteger

def getAggrElementAsDouble(aggregate, elementIndex):
    return _ifc.getAggrElementAsDouble(aggregate, elementIndex)
getAggrElementAsDouble = _ifc.getAggrElementAsDouble

def getAggrElementAsString(aggregate, elementIndex):
    return _ifc.getAggrElementAsString(aggregate, elementIndex)
getAggrElementAsString = _ifc.getAggrElementAsString

def getAggrElementAsUnicode(aggregate, elementIndex):
    return _ifc.getAggrElementAsUnicode(aggregate, elementIndex)
getAggrElementAsUnicode = _ifc.getAggrElementAsUnicode

def getAggrElementAsInstance(aggregate, elementIndex):
    return _ifc.getAggrElementAsInstance(aggregate, elementIndex)
getAggrElementAsInstance = _ifc.getAggrElementAsInstance

def getAttrBNAsInteger(instance, attributeName):
    return _ifc.getAttrBNAsInteger(instance, attributeName)
getAttrBNAsInteger = _ifc.getAttrBNAsInteger

def getAttrBNAsDouble(instance, attributeName):
    return _ifc.getAttrBNAsDouble(instance, attributeName)
getAttrBNAsDouble = _ifc.getAttrBNAsDouble

def getAttrBNAsString(instance, attributeName):
    return _ifc.getAttrBNAsString(instance, attributeName)
getAttrBNAsString = _ifc.getAttrBNAsString

def getAttrBNAsUnicode(instance, attributeName):
    return _ifc.getAttrBNAsUnicode(instance, attributeName)
getAttrBNAsUnicode = _ifc.getAttrBNAsUnicode

def getAttrBNAsInstance(instance, attributeName):
    return _ifc.getAttrBNAsInstance(instance, attributeName)
getAttrBNAsInstance = _ifc.getAttrBNAsInstance

def getAttrBNAsAggr(instance, attributeName):
    return _ifc.getAttrBNAsAggr(instance, attributeName)
getAttrBNAsAggr = _ifc.getAttrBNAsAggr

def getInstanceClassInfo(instance):
    return _ifc.getInstanceClassInfo(instance)
getInstanceClassInfo = _ifc.getInstanceClassInfo

def getInstanceLocalId(instance):
    return _ifc.getInstanceLocalId(instance)
getInstanceLocalId = _ifc.getInstanceLocalId
class IfcGeo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IfcGeo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IfcGeo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["noVertices"] = _ifc.IfcGeo_noVertices_set
    __swig_getmethods__["noVertices"] = _ifc.IfcGeo_noVertices_get
    if _newclass:
        noVertices = _swig_property(_ifc.IfcGeo_noVertices_get, _ifc.IfcGeo_noVertices_set)
    __swig_setmethods__["noIndices"] = _ifc.IfcGeo_noIndices_set
    __swig_getmethods__["noIndices"] = _ifc.IfcGeo_noIndices_get
    if _newclass:
        noIndices = _swig_property(_ifc.IfcGeo_noIndices_get, _ifc.IfcGeo_noIndices_set)
    __swig_setmethods__["primitiveCount"] = _ifc.IfcGeo_primitiveCount_set
    __swig_getmethods__["primitiveCount"] = _ifc.IfcGeo_primitiveCount_get
    if _newclass:
        primitiveCount = _swig_property(_ifc.IfcGeo_primitiveCount_get, _ifc.IfcGeo_primitiveCount_set)
    __swig_setmethods__["vertices"] = _ifc.IfcGeo_vertices_set
    __swig_getmethods__["vertices"] = _ifc.IfcGeo_vertices_get
    if _newclass:
        vertices = _swig_property(_ifc.IfcGeo_vertices_get, _ifc.IfcGeo_vertices_set)
    __swig_setmethods__["indices"] = _ifc.IfcGeo_indices_set
    __swig_getmethods__["indices"] = _ifc.IfcGeo_indices_get
    if _newclass:
        indices = _swig_property(_ifc.IfcGeo_indices_get, _ifc.IfcGeo_indices_set)

    def __init__(self):
        this = _ifc.new_IfcGeo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _ifc.delete_IfcGeo
    __del__ = lambda self: None
IfcGeo_swigregister = _ifc.IfcGeo_swigregister
IfcGeo_swigregister(IfcGeo)


def getGeo(model, instance):
    return _ifc.getGeo(model, instance)
getGeo = _ifc.getGeo

def getGeoVerticesFloat(geo, i):
    return _ifc.getGeoVerticesFloat(geo, i)
getGeoVerticesFloat = _ifc.getGeoVerticesFloat

def getGeoIndicesInt(geo, i):
    return _ifc.getGeoIndicesInt(geo, i)
getGeoIndicesInt = _ifc.getGeoIndicesInt

def delGeo(geo):
    return _ifc.delGeo(geo)
delGeo = _ifc.delGeo
# This file is compatible with both classic and new-style classes.


